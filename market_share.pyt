# -*- coding: utf-8 -*-'''Charlie BrittMSAT toolbox'''import arcpyclass Toolbox:    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool:    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Market Share Analysis Tool"        self.description = "Market share"    def getParameterInfo(self):        """Define the tool parameters."""                in_features_point = arcpy.Parameter(            displayName   = 'Input point features',            name          = 'in_features_point',            datatype      = 'GPFeatureLayer',            parameterType = 'Required',            direction     = 'Input')        in_features_point.filter.list = ['Point']        in_name_field = arcpy.Parameter(            displayName   = 'Name field',            name          = 'in_name_field',            datatype      = 'Field',            parameterType = 'Required',            direction     = 'Input')        in_name_field.filter.list = ['String']        in_name_field.parameterDependencies = [in_features_point.name]        in_features_polygon = arcpy.Parameter(            displayName   = "Input polygon features",            name          = "in_features_polygon",            datatype      = "GPFeatureLayer",            parameterType = "Required",            direction     = "Input")        in_features_polygon.filter.list = ["Polygon"]                in_join_field = arcpy.Parameter(            displayName   = "Polygon join field",            name          = "in_join_field",            datatype      = "Field",            parameterType = "Required",            direction     = "Input")        in_join_field.filter.list = ['String']        in_join_field.parameterDependencies = [in_features_polygon.name]        in_area_field = arcpy.Parameter(            displayName   = "Polygon old area field",            name          = "in_area_field",            datatype      = "Field",            parameterType = "Required",            direction     = "Input")        in_area_field.filter.list = ['Double']        in_area_field.parameterDependencies = [in_features_polygon.name]        in_population_table = arcpy.Parameter(            displayName   = "Data table for polygons",            name          = "in_polygon_table",            datatype      = "GPTableView",            parameterType = "Required",            direction     = "Input")        in_table_join_field = arcpy.Parameter(            displayName   = "Table join field",            name          = "in_table_join_field",            datatype      = "Field",            parameterType = "Required",            direction     = "Input")        in_table_join_field.parameterDependencies = [in_population_table.name]        in_table_population_field = arcpy.Parameter(            displayName   = "Share field",            name          = "in_share_field",            datatype      = "Field",            parameterType = "Required",            direction     = "Input")        in_table_population_field.parameterDependencies = [in_population_table.name]        out_features_class = arcpy.Parameter(            displayName   = "Output",            name          = "out_features_class",            datatype      = "GPFeatureLayer",            parameterType = "Required",            direction     = "Output")                params = [in_features_point, in_name_field, in_features_polygon, in_join_field,                  in_area_field, in_population_table, in_table_join_field,                  in_table_population_field, out_features_class]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        in_features_point          = parameters[0].valueAsText        in_name_field              = parameters[1].valueAsText        in_features_polygon        = parameters[2].valueAsText        in_join_field              = parameters[3].valueAsText        in_area_field              = parameters[4].valueAsText        in_population_table        = parameters[5].valueAsText        in_table_join_field        = parameters[6].valueAsText        in_table_population_field  = parameters[7].valueAsText        out_features_class         = parameters[8].valueAsText        #Create scratch gdb        scratch = arcpy.env.scratchGDB                #Create Thiessen polygons        desc = arcpy.da.Describe(in_features_polygon)        arcpy.env.extent = desc['extent']        out_thiessen = scratch + '/thiessen_tmp'        arcpy.analysis.CreateThiessenPolygons(in_features_point, out_thiessen, 'ALL')        #Intersect thiessen polygon with tracts        intersect = scratch + '/intersect_tmp'        arcpy.analysis.Intersect([out_thiessen, in_features_polygon], intersect, 'ALL')        #Join intersection with population        arcpy.management.JoinField(intersect, in_join_field, in_population_table,                                   in_table_join_field, [in_table_population_field])        #Get proportions        new_pop = 'NewPop'        formula = f'!{in_table_population_field}! * !Shape_Area! / !{in_area_field}!'        arcpy.management.CalculateField(intersect, new_pop, formula, field_type='DOUBLE',                                        expression_type='PYTHON3')        #Dissolve joined layer        arcpy.management.Dissolve(intersect, out_features_class, in_name_field,                                  statistics_fields=[(new_pop, "SUM")])        #get population totals        total = 0        cursor = arcpy.da.SearchCursor(out_features_class, ['SUM_NewPop'])        for row in cursor:            total+=row[0]        #compute percent population        percentage = 'PctPop'        pct_formula = f'(!SUM_NewPop! / {total}) * 100'        arcpy.management.CalculateField(out_features_class, percentage, pct_formula, field_type='DOUBLE',                                        expression_type='PYTHON3')        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return